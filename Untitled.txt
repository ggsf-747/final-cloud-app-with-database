## models.py

from django.contrib import admin
# <HINT> Import any new Models here
from .models import Course, Lesson, Instructor, Learner, Question, Choice

# <HINT> Register QuestionInline and ChoiceInline classes here

class ChoiceInline(admin.StackedInline):
    model = Choice

class QuestionInline(admin.StackedInline):
    model = Question


class LessonInline(admin.StackedInline):
    model = Lesson
    extra = 5


# Register your models here.
class CourseAdmin(admin.ModelAdmin):
    inlines = [LessonInline]
    choices = [ChoiceInline]
    questions = [QuestionInline]
    list_display = ('name', 'pub_date')
    list_filter = ['pub_date']
    search_fields = ['name', 'description']


class LessonAdmin(admin.ModelAdmin):
    list_display = ['title']


# <HINT> Register Question and Choice models here

admin.site.register(Course, CourseAdmin)
admin.site.register(Lesson, LessonAdmin)
admin.site.register(Instructor)
admin.site.register(Learner)

admin.site.register(Choice)
admin.site.register(Question)






##


<!DOCTYPE html>
<html lang="en">
<head>
     {% load static %}
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>
    <meta charset="UTF-8">
</head>

<body>
    <!-- Navigation bar -->
    <nav class="navbar navbar-light bg-light">
        <div class="container-fluid">
            <div class="navbar-header">
                  <a class="navbar-brand" href="{% url 'onlinecourse:index' %}">Home</a>
            </div>
            <ul class="nav navbar-nav navbar-right">
                {% if user.is_authenticated %}
                <li>
                    <a class="btn btn-link" href="#">{{ user.first_name }}({{ user.username }})</a>
                    <a class="btn btn-link" href="{% url 'onlinecourse:logout' %}">Logout</a>
                </li>
                {% else %}
                <li>
                    <form class="form-inline" action="{% url 'onlinecourse:login' %}" method="post">
                        {% csrf_token %}
                        <div class="input-group">
                            <input type="text" class="form-control" placeholder="Username" name="username" >
                            <input type="password" class="form-control" placeholder="Username" name="psw" >
                            <button class="btn btn-primary" type="submit">Login</button>
                            <a class="btn btn-link" href="{% url 'onlinecourse:registration' %}">Sign Up</a>
                        </div>
                    </form>
                </li>
                {% endif %}
            </ul>
        </div>
    </nav>

    <!-- Page content -->
    <div class="container-fluid">
            <h2>{{ course.name }}</h2>
            <div class="card-columns-vertical">
                {% for lesson in course.lesson_set.all %}
                    <div class="card mt-1">
                        <div class="card-header"><h5>Lesson {{lesson.order|add:1}}: {{lesson.title}}</h5></div>
                        <div class="card-body">{{lesson.content}}</div>
                    </div>
                {% endfor %}
            </div>
            <br />
            {% if user.is_authenticated %}
            <button class= "btn btn-primary" type = "button" data-toggle = "collapse" data-toggle="collapse" data-target = "#exam" aria-expanded = "false" aria-controls="exam"> Start exam</button>
            <br />
            <!-- Task: show questions and choices -->
            <!-- <HINT> Use Bootstrap Collapse to hide exam first, more details could be found here
            https://www.w3schools.com/bootstrap4/bootstrap_collapse.asp-->

            <!--

            A collapse example here:
            <div id="exam" class="collapse">
                Click to expand elements within the collapse div
                </div>

            -->

            <!-- <HINT> If user is authenticated, show course exam with a list of question -->

            <!-- <HINT> Each example will have many questions -->

            <!-- <HINT> Each question will have many choices -->


            <!-- <HINT> Create a form to collect the selected choices for all questions -->
            <!-- <HINT> For each question choice, you may create a checkbox input like
            <input type="check" name="choice_{{choice.id}}" id="{{choice.id}}" ...>
            -->
            <div id="exam" class="collapse">
            <form id="questionform" action="/onlinecourse/{{course.id}}/submit/" method="post">
                        {% for question in course.question_set.all %}
                        <div class="card mt-1">
                            <div class="card-header"><h5>{{ question.question_text}}</h5></div>
                            {% csrf_token %}
                            <div class="form-group">
                               {% for choice in question.choice_set.all %}
                                <div class="form-check">
                                    <label class="form-check-label">
                                        <input type="checkbox" name="choice_{{choice.id}}"
                                               class="form-check-input" id="{{choice.id}}"
                                               value="{{choice.id}}">{{ choice.choice_content }}
                                    </label>
                                </div>
                                {% endfor %}
                            </div>
                        </div>
                        {% endfor %}
                    <input class="btn btn-success btn-block" type="submit" value="Submit">
            </form> -->

            <!--Check here to see more details Bootstrap checkbox
             https://www.w3schools.com/bootstrap4/bootstrap_forms_inputs.asp-->
    </div>
    {% endif %}
</body>
</html>



## urls.py

from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from . import views

app_name = 'onlinecourse'
urlpatterns = [
    # route is a string contains a URL pattern
    # view refers to the view function
    # name the URL
    path(route='', view=views.CourseListView.as_view(), name='index'),
    path('registration/', views.registration_request, name='registration'),
    path('login/', views.login_request, name='login'),
    path('logout/', views.logout_request, name='logout'),
    # ex: /onlinecourse/5/
    path('<int:pk>/', views.CourseDetailView.as_view(), name='course_details'),
    # ex: /enroll/5/
    path('<int:course_id>/enroll/', views.enroll, name='enroll'),

    # <HINT> Create a route for submit view
    path('<int:course_id>/submit/', views.submit, name='submit'),

    # <HINT> Create a route for show_exam_result view
    path('course/<int:course_id>/submission/<int:submission_id>/result/', views.show_exam_result, name='exam_result')

 ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



## examresult bootstrap
from django.urls import path
from django.conf import settings
from django.conf.urls.static import static
from . import views

app_name = 'onlinecourse'
urlpatterns = [
    # route is a string contains a URL pattern
    # view refers to the view function
    # name the URL
    path(route='', view=views.CourseListView.as_view(), name='index'),
    path('registration/', views.registration_request, name='registration'),
    path('login/', views.login_request, name='login'),
    path('logout/', views.logout_request, name='logout'),
    # ex: /onlinecourse/5/
    path('<int:pk>/', views.CourseDetailView.as_view(), name='course_details'),
    # ex: /enroll/5/
    path('<int:course_id>/enroll/', views.enroll, name='enroll'),

    # <HINT> Create a route for submit view
    path('<int:course_id/submit/', views.submit, name='submit')

    # <HINT> Create a route for show_exam_result view
    path('course/<int:course_id>/submission/<int:submission_id>/result/', views.show_exam_result, name='exam_result')

 ] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)


## views.py
from django.shortcuts import render
from django.http import HttpResponseRedirect
# <HINT> Import any new Models here
from .models import Course, Enrollment, Question, Choice, Submission
from django.contrib.auth.models import User
from django.shortcuts import get_object_or_404, render, redirect
from django.urls import reverse
from django.views import generic
from django.contrib.auth import login, logout, authenticate
import logging
# Get an instance of a logger
logger = logging.getLogger(__name__)
# Create your views here.


def registration_request(request):
    context = {}
    if request.method == 'GET':
        return render(request, 'onlinecourse/user_registration_bootstrap.html', context)
    elif request.method == 'POST':
        # Check if user exists
        username = request.POST['username']
        password = request.POST['psw']
        first_name = request.POST['firstname']
        last_name = request.POST['lastname']
        user_exist = False
        try:
            User.objects.get(username=username)
            user_exist = True
        except:
            logger.error("New user")
        if not user_exist:
            user = User.objects.create_user(username=username, first_name=first_name, last_name=last_name,
                                            password=password)
            login(request, user)
            return redirect("onlinecourse:index")
        else:
            context['message'] = "User already exists."
            return render(request, 'onlinecourse/user_registration_bootstrap.html', context)


def login_request(request):
    context = {}
    if request.method == "POST":
        username = request.POST['username']
        password = request.POST['psw']
        user = authenticate(username=username, password=password)
        if user is not None:
            login(request, user)
            return redirect('onlinecourse:index')
        else:
            context['message'] = "Invalid username or password."
            return render(request, 'onlinecourse/user_login_bootstrap.html', context)
    else:
        return render(request, 'onlinecourse/user_login_bootstrap.html', context)


def logout_request(request):
    logout(request)
    return redirect('onlinecourse:index')


def check_if_enrolled(user, course):
    is_enrolled = False
    if user.id is not None:
        # Check if user enrolled
        num_results = Enrollment.objects.filter(user=user, course=course).count()
        if num_results > 0:
            is_enrolled = True
    return is_enrolled


# CourseListView
class CourseListView(generic.ListView):
    template_name = 'onlinecourse/course_list_bootstrap.html'
    context_object_name = 'course_list'

    def get_queryset(self):
        user = self.request.user
        courses = Course.objects.order_by('-total_enrollment')[:10]
        for course in courses:
            if user.is_authenticated:
                course.is_enrolled = check_if_enrolled(user, course)
        return courses


class CourseDetailView(generic.DetailView):
    model = Course
    template_name = 'onlinecourse/course_detail_bootstrap.html'


def enroll(request, course_id):
    course = get_object_or_404(Course, pk=course_id)
    user = request.user

    is_enrolled = check_if_enrolled(user, course)
    if not is_enrolled and user.is_authenticated:
        # Create an enrollment
        Enrollment.objects.create(user=user, course=course, mode='honor')
        course.total_enrollment += 1
        course.save()

    return HttpResponseRedirect(reverse(viewname='onlinecourse:course_details', args=(course.id,)))


# <HINT> Create a submit view to create an exam submission record for a course enrollment,
# you may implement it based on following logic:
         # Get user and course object, then get the associated enrollment object created when the user enrolled the course
         # Create a submission object referring to the enrollment
         # Collect the selected choices from exam form
         # Add each selected choice object to the submission object
         # Redirect to show_exam_result with the submission id
def submit(request, course_id):
    course = get_object_or_404(course, pk=course_id)
    user = request.user
    enroll = Enrollment.objects.get(user=user, course=course)
    sub = Submission.objects.create(enrollment=enroll)
    for key in request.POST:
        if key.startswith('choice'):
            value = request.POST[key]
            choice_id = int(value)
            choice_obj = get_object_or_404(Choice, pk=choice_id)
            sub_choices.add(choice_obj)
    return HttpResponseRedirect(reverse(viewname='onlinecourse:exam_result', args = (course.id, sub.id)))

# <HINT> A example method to collect the selected choices from the exam form from the request object
#def extract_answers(request):
#    submitted_anwsers = []
#    for key in request.POST:
#        if key.startswith('choice'):
#            value = request.POST[key]
#            choice_id = int(value)
#            submitted_anwsers.append(choice_id)
#    return submitted_anwsers


# <HINT> Create an exam result view to check if learner passed exam and show their question results and result for each question,
# you may implement it based on the following logic:
        # Get course and submission based on their ids
        # Get the selected choice ids from the submission record
        # For each selected choice, check if it is a correct answer or not
        # Calculate the total score
def show_exam_result(request, course_id, submission_id):
    course = get_object_or_404(Course, pk=course_id)
    sub = get_object_or_404(Submission, pk=submission_id)
    selected_choices = sub.choices.all()
    correct = 0
    for choice in selected_choices:
        if choice.correct == True:
            correct = correct + 1
    grade = int((correct/course.question_set.count())*100)
    final_return = {'course': course, 'submission': sub, 'grade': grade}

    return render(request, 'onlinecourse/exam_result_bootstrap.html', final_return)



## exam_result_bootstrap

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    {% load static %}
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>

 <nav class="navbar navbar-light bg-light">
    <div class="container-fluid">
        <div class="navbar-header">
              <a class="navbar-brand" href="{% url 'onlinecourse:index' %}">Home</a>
        </div>
        <ul class="nav navbar-nav navbar-right">
            {% if user.is_authenticated %}
            <li>
                <a class="btn btn-link" href="#">{{ user.first_name }}({{ user.username }})</a>
                <a class="btn btn-link" href="{% url 'onlinecourse:logout' %}">Logout</a>
            </li>
            {% else %}
            <li>
                <form class="form-inline" action="{% url 'onlinecourse:login' %}" method="post">
                    {% csrf_token %}
                    <div class="input-group">
                        <input type="text" class="form-control" placeholder="Username" name="username" >
                        <input type="password" class="form-control" placeholder="Username" name="psw" >
                        <button class="btn btn-primary" type="submit">Login</button>
                        <a class="btn btn-link" href="{% url 'onlinecourse:registration' %}">Sign Up</a>
                    </div>
                </form>
            </li>
            {% endif %}
        </ul>
    </div>
</nav>

<div class="container-fluid">
    {% if grade > 80 %}
    <div class="alert alert-success">
       <!--HINT Display passed info -->
       Congratulations {{ user.first_name }}! You passed and completed the course, scoring {{ grade }} / 100
    </div>
        {% else %}
        <div class="alert alert-danger">
           <strong> Failure </strong> Sorry {{ user.first_name }}! You failed, scoring {{ grade }} / 100
        </div>
        <a class="btn btn-link text-danger" href="{% url 'onlinecourse:course_details' course.id %}">Re-test</a>
        {% endif %}
        <div class="card-columns-vertical mt-1">
        <h5 class="">Exam results</h5>
            <!--HINT Display exam results-->
        {% for question in course.question_set.all %}
        <div class = "card mt-1">
            <div class = "card-header"><h5>{{question.question_text}}</h5></div>
            <div class = "card-body">
                {% for choice in question.choice_set.all %}
                    {% if choice.correct %}
                        {% if choice in submission.choices.all %}
                            <div class = "text-success"> Correct Answer: {{choice.choice_content }} </div>
                        {% else %}
                            <div class = "text-warning"> Not selected: {{choice.choice_content}} </div>
                        {% endif %}
                    {% else %}
                        <div>{{ choice.choice_content }} </div>
                    {% endif %}
                {% endfor %}
            </div>
        </div>
        {% endfor %}
        </div>
    </div>
</body>
</html>